{"meta":{"title":"Home","subtitle":"Spacefan","description":"Personal blog of Spacefan","author":"Spacefan","url":"http://spacefan.github.io"},"pages":[{"title":"","date":"2018-06-18T10:27:43.848Z","updated":"2016-01-30T11:16:22.000Z","comments":true,"path":"404.html","permalink":"http://spacefan.github.io/404.html","excerpt":"","text":"404 | hexo-theme-freemind Toggle navigation Freemind Archives Categories Tags About OMG, failed to find this article! &copy; 2014 Joseph Pan with help from Hexo and Twitter Bootstrap. Theme by Freemind. var path = \"/hexo-theme-freemind/search.xml\"; searchFunc(path, 'local-search-input', 'local-search-result');"},{"title":"About","date":"2019-02-14T14:50:49.703Z","updated":"2019-02-14T14:50:49.703Z","comments":true,"path":"about/index.html","permalink":"http://spacefan.github.io/about/index.html","excerpt":"","text":"Who am I 我的名字叫 廖祥，是一个不折不扣的航天爱好者，所以我给自己取名为 Spacefan。我是一位航天工程师，目前就职于中国航天科技集团。 My Story (-;(-;(-;…博主太懒，没有留下任何东西…;-) ;-) ;-) Contact E-mail: liaoxiang_szdfh@163.comLocation: Shenzhen, Guangdong, China"},{"title":"Categories","date":"2018-06-18T10:27:43.848Z","updated":"2016-03-15T14:23:14.805Z","comments":true,"path":"categories/index.html","permalink":"http://spacefan.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-06-18T10:27:43.993Z","updated":"2016-01-30T11:16:22.000Z","comments":true,"path":"tags/index.html","permalink":"http://spacefan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"低轨移动卫星通信技术的过于、现状及未来","slug":"LEOComm","date":"2019-02-12T14:32:00.000Z","updated":"2019-02-15T15:35:19.508Z","comments":true,"path":"2019/02/12/LEOComm/","link":"","permalink":"http://spacefan.github.io/2019/02/12/LEOComm/","excerpt":"通信、导航和遥感是卫星应用领域的三驾马车，简称 通导遥。鉴于任务特性，通信卫星和导航卫星通常运行在中高轨道，遥感卫星一般则运行在低地球轨道。自 20 世纪 90 年代以来，微小卫星技术迅猛发展，性价比逐年攀升，通信与导航卫星在低地球轨道（Low Earth Orbits, LEO）上的应用潜力渐渐被人们挖掘，尤其是通信卫星，已有成功商业案例。 本文将阐述笔者对低轨移动卫星通信技术的过去和发展现状的一些看法，以及低轨移动卫星通信技术的产业展望。","text":"通信、导航和遥感是卫星应用领域的三驾马车，简称 通导遥。鉴于任务特性，通信卫星和导航卫星通常运行在中高轨道，遥感卫星一般则运行在低地球轨道。自 20 世纪 90 年代以来，微小卫星技术迅猛发展，性价比逐年攀升，通信与导航卫星在低地球轨道（Low Earth Orbits, LEO）上的应用潜力渐渐被人们挖掘，尤其是通信卫星，已有成功商业案例。 本文将阐述笔者对低轨移动卫星通信技术的过去和发展现状的一些看法，以及低轨移动卫星通信技术的产业展望。 图 1: 低轨移动通信艺术想象图 1 低轨移动卫星通信技术的过去 20 世纪 80 年代开始掀起的小卫星技术热潮对星座的发展起了巨大的推动作用。早期卫星质量大，研制周期长，要完成一个星座的部署很困难。在卫星运行寿 命短和可靠性差的情况下，没有等到星座部署完成，早期发射的卫星就已经不能工作了。在当时的技术和经济条件下，小卫星提供了一个较好的解决思路，与此同时世界通信市场不断扩大，这两方面因素促进了移动通信星座发展。 20 世纪 90 年代初期，低轨通信星座开始盛行，最多时有十几个卫星通信星座 计划。这些星座通常被分为三类： 大型 LEO 卫星移动电话系统； 中小型 LEO 卫星移动数据传输系统； 宽带多媒体通信系统（Ka 波段）。 根据美国联邦通信委员会的决定，小 LEO 系统是非话音非静止轨道卫星，在 轨道高度较宽的范围内提供低速业务；而大 LEO 系统要提供话音、传真、数据和 寻呼业务，寻呼包括在低速业务内。 然而低轨通信星座发展并不顺利，主要原因在市场竞争和经济因素。由于目前通信密集地区是城市，而城市地面蜂窝通信费用很低，卫星通信费用高，因而竞争不过现有的通信手段。当时名震一时的“铱星系统”（Iridium）运营商最终应入不敷出宣布破产。目前 Orbcomm 和“全球星”系统（GlobalStar）运营正常，Orbcomm 是低成本的数据通信和定位系统，而“全球星”主要是满足国防、边远、沙漠地区通信的需要，填补了地面通信网的空白。 1.1 Orbcomm Orbcomm 是一个在全球范围内提供双向、窄带的数据传送、数据通信以及定位业务的卫星通信系统。Orbcomm 设计为 47 颗卫星（包括 6 颗备用卫星）分布在 7 个轨道面的全球覆盖的星座系统，这 7 个轨道面命名为A、B、C、D、E、F、G。其中， A~D 轨道倾角为 45°，高度 800km；E 为赤道轨道，高度 975km；F、G 轨道倾角分别为 70° 及 108°，高度 820km。Orbcomm 从 1995 年开始发射试验卫星，1998 年底开始提供全球服务。目前在轨服务的卫星共有 29 颗，A、B 平面各有 8 颗卫星，C、D 轨道各有 6 颗卫星，G 轨道 1 颗卫星。Orbcomm 的每颗卫星不足 50kg，是典型的低成本微小卫星。目前该系统已经在交通运输、油气田、水利、环保、渔船以及消防报警等方面发挥重要作用。 图 2: Orbcomm 星座系统瞬时地面覆盖示意图 1.2 铱星星座（Iridium Constellation） “铱星”星座系统是美国摩托罗拉公司于 1987 年提出的一种利用低轨道星座实现全球个人卫星移动通信的系统，它与现有的通信网相结合，可以实现全球数字化个人通信。“铱星系统”区别于其他卫星移动通信系统的特点之一是卫星具有星间通信链路，能够不依赖地面转接为地球上任意位置的终端提供连接，因而系统的性能极为先进、复杂， 这导致其投资费用较高。星座的构型为玫瑰星座，卫星均匀部署在南北方向 677km 高的 6 条极轨近圆轨道上，轨道倾角为 86.4°。每颗卫星载有 3 个 16 波束相控阵天线，其投射的多波束在地球表面形成 48 个蜂窝区。每颗卫星拥有 4 条 Ka 频段的星间通信链路，两条用于建立同轨道面前后方向卫星的星间链路，星间距离 4021~4042km；两条用于建立相邻轨道面间卫星的通信链路（仅适用于纬度 68° 以下地域），星间 距离 2700~4400km。异轨道面间链路的天线可根据加载到卫星上的星历信息进行指向调整，波束宽度足以适用纬度控制和卫星位置保持的容差。卫星在轨重量 320kg，工作寿命 5~8 年。 图 3: 铱星星座三维构型示意图（66 颗工作星） 1.3 全球星系统（GlobalStar System） “全球星”系统是美国 Loral 和 Qualcomm 公司发起的，是目前唯一正式商业运行的语音移动通信系统。卫星系统由 48 颗工作卫星和 12 颗备用卫星组成。最近的一次发射是在 2007 年 10 月 21 日，由俄罗斯的运载火箭将四颗备份卫星送入轨道。卫星重约 450kg,预定寿命为 7.5 年。分布在 8 个倾角为 52°的圆轨道上，轨道高度 1414km,每个轨道分布 6 颗工作卫星和 1~2 颗备用卫星，星座的相位因子为 1。系统主要覆盖南北纬 70° 以内地区。“全球星”系统的每个卫星利用 16 个点波束天线将辐射区划分为 16 个小区以与地面的用户和网关相互收发信息考虑到信息传输的多样性和链路余量问题，“全球星”在主要的商业服务区（北纬25°~49°）满足任何时刻至少两重覆盖的要求，而其他地区则只要求保证一重覆盖，“全球星”系统的地面覆盖如图4 所示。“全球星”系统的卫星设置弯管式（Bent Pipe）转发器，通过地面建立不在同一卫星覆盖区内的用户的连接，因此，需要建立较多的网关地球站。 图 4: 全球星星座系统瞬时地面覆盖示意图（48 颗星） 1.4 其他系统 除上述已经投人运营的卫星通信系统外，同时期的还有 ICO, Ellipso 等卫星通信系统计划。ICO 全球通信系统由高度为 10390km 的中轨大型卫星组成，共有 12 颗卫星，布置于 2 个轨道面，每个轨道面 5 颗工作星， 1 颗备份星。由于受“铱星系统”的影响，投资者缺乏信心，1999 年也曾宣布破产重组。 Ellipso 卫星移动通信系统是由美国移动通信控股公司设计的一种独特的混合轨道星座，它由两个规则的子星座即 Borealis 和 Concordia 组成，用 17 颗卫星实现人口主要分布区域（北半球和南半球的中低讳地区）的覆盖，比 Iridium 星座和 GlobalStar 星座的卫星数量少得多。在该星座中有 10 颗卫星部署在两条轨道，倾角为 116.6° 的椭圆轨道上（Borealis），近地点高度 520km，远地点高度 7846km，轨道周期为 3h，偏心率为 0.35，用以覆盖北半球中高讳度地带；另有 7 颗卫星部署在轨道高度为 8063km 赤道圆轨道上（Concordia），用以覆盖中低讳度地带。 随着数字技术的进步以及人们对高质量的电文、语音、数据和视频通信业务需求的增长，美国许多通信经营商纷纷投向宽带多媒体卫星系统，已有多家公司获得了 FCC（Federal Communications Commission，美国通信委员会）的许可证。它们都将利用 Ka 波段（20~30GHz）提供宽带、大容量、多媒体的卫星通信业务，典型的静止轨道系统如 Spaceway、Astrolink 等，中低轨系统有 Skybridge，Teledesic 等。 Skybridge 星座由 80 颗低地球圆轨道卫星组成，采用 Ka 波段支持高速数据、因特网接人及宽带多媒体技术。Skybridge 星座在设计上有其特殊之处，为了避免与同步轨道或其他高轨卫星的频率冲突，采用了复合 Walker 星座的构型，以“星对”为单元构成整个星座，这样当任意一颗卫星与其他卫星发生冲突时，采用另外一颗处于安全距离的卫星来替代工作。 Teledesic 是 20 世纪卫星数最多的一个星座计划，在计划刚公布时引起了不小的反响。星座最初计划由 840 颗星组成。后来改成了 288 颗卫星（构型如下图所示），分布于 12 平面，每个面 24 颗卫星，后又减至 120 颗卫星加 6 颗在轨备份。Teledesic的 星地链路为 Ka 波段，每个轨道面上的相邻卫星之间建 有 60GHz 的星际链路，Teledesic 采用全星上处理和全星上交换，系统设计成一个“空中因特网”。 图 5: Teledesic 星座三维构型示意图（228 颗星） 2 低轨移动卫星通信技术发展现状 进入 21 世纪后，计算机、微机电、先进制造等行业的快速发展推动了通信技术和微小卫星技术升级换代，进而使得卫星移动通信成本的下降，低轨卫星移动通信星座凸显出广泛的应用前景。2015年前后，国内外先后提出多个大规模低轨移动通信星座系统，知名的诸如：Iridium Next、OneWeb、StarLink、鸿雁星座、虹云星座等。其中，铱星二代 (Iridium Next）在 2019 年 1 月 11 日成功完成最后一组卫星发射，并于 2019 年 2 月 6 日宣布完成星座组网，正式投入运营；SpaceX 公司的 StarLink 也在 2018 年 2 月 2 日成功发射两颗试验星 Microsat2-A/B，对最终要组建的 12000 颗微小卫星星座信心十足。 2.1 铱星二代（Iridium NEXT） 铱星通信公司于 2010 年 6 月宣布了其下一代卫星星座 Iridium NEXT 的筹建资金，建设和部署计划，以取代超期服务的铱星星座。2016 年铱星公司与 SpaceX 签订了 4.92 亿美元的发射合同， 一次 10 星一共七次将 70 颗铱星二代系统发射到 LEO 轨道。随后，双方补签了第八次 5 星发射合同。2019 年 1 月 11 号，随着 SpaceX 成功将最后 10 星发射入轨，标志着铱星二代完成组网工作。铱星二代由 81 颗功能相同的卫星组成天基移动窄带通信系统，其中 66 颗工作星呈 δ-Walker 星座均匀分布在 6 个轨道面上，辅以 6 颗天基备份星和 9 颗地基备份星。 图 6: 铱星二代星座三维构型示意图（66 颗工作星） 铱星二代卫星重约 860kg，最大功耗 2kW，发射包络 3.1m x 2.4m x 1.5m，设计寿命 10 年，任务寿命 15 年。卫星主载荷为 L 波段通信载荷，其相控阵天线在地球表面生成 48 个波束，形成直径为 4700km 的蜂窝，用于提供 1.5Mbps 的星地数据传输服务；卫星提供搭载服务，可搭载质量不大于 50kg、功耗不大于 50W、空间包络不大于 40 cm x 70 cm x 30 cm、数据量不大于 100 kbps（90% 占空比）或 1 Mbps（10% 占空比）的次载荷，目前每颗卫星皆携带一个 ADS-B 接收机，58 颗星携带了 AIS 接收机，用于全球民用客机及船舶监视服务。此外，卫星具备星间和星地网关链路，星间链路由 4 个 Ka 波段（23 GHz）通信设备实现，前后双星的链路 2 个设备固定指向，相邻轨道 2 个设备具备目标姿态指向能力，通信速率达 10Mbps；星地网关链路由 2 个具备目标姿态指向的 Ka 波段（20/30 GHz）通信设备实现，通信速率达 8Mbps。 表 1: 铱星二代卫星总体指标 铱星二代星座 66 颗工作星和 6 颗备份星皆由 SpaceX 公司的 Falcon-9 v1.2 运载火箭发射，卫星首先被送入 625km 的停泊轨道，通过测试后变轨进入 780km 的工作轨道。寿命末期，卫星再次变轨将其近地点降低至 250km，实现主动离轨。由于项目规模庞大，铱星二代的总成本达 30 亿美元，包括卫星研发、制造和发射相关的所有开销。 2.2 OneWeb 2.2.1 OneWeb 简介 2012 年，卫星互联网公司 O3b 创始人 Greg Wyler 成立了 OneWeb 公司，致力于实现全球天基实时互联的宽带互联网络系统。O3b 拥有 12 颗位于赤道上方的 MEO（距离地面 8000km）卫星，并成功在系统建成第一年就超额完成了 1 亿美金的财政目标，因而 OneWeb 成立之初就被众多太空互联网投资者看好。 图 7: Onweb 创始人 Greg Wyler OneWeb 公司计划建造的 OneWeb 星座设计由 900 颗微小卫星组成，其中 720 颗将被发射到倾角为 87.9° 的1200km 高度轨道，均匀分布在 18个轨道面 ，每个轨道面工作星 36 颗，辅以 4 颗备份星，以提供全球宽带互联网实时连接。 图 8: OneWeb 星座艺术图及其项目特性 OneWeb 卫星重约 150kg，设计寿命 5 年，发射包络约为 1m x 1m x 1.3m，配备两个太阳能电池板，采用电推进系统进行轨道机动、构型保持以及主动离轨，并使用 Ku 波段通信天线实现用户链路和Ka波段通信天线实现网关链路，可提供高仰角、优于 50ms 延时、宽带速率达 50Mps 的互联网接入服务。 图 9: OneWeb 星座空间段特性 图 10: OneWeb 卫星模型 星座的部署分多个批次进行，每批卫星首先被发射至 450~475km 的停泊轨道，待完成测试后利用电推进系统抬升轨道至 1200km 高度的工作轨道。值得一提的是，1200km 高度的轨道空间碎片通量处于 LEO 轨道较低水平，因而碰撞风险较小，对于设计由 720 颗卫星组成的 OneWeb 星座来说无疑是极其理想的轨道空间 。此外，为满足空间碎片协委会（机构间空间碎片协调委员会）对低轨卫星空间碎片减缓要求的规定，当星座接近其预期使用寿命时，所有卫星将主动离轨。届时每颗卫星先将轨道高度降低至 1100km，再将近地点高度降低至 250km，随后利用大气阻力在 5 年内坠毁，以确保不产生太空垃圾。 图 11: LEO 编目空间碎片通量统计数据（2011年） 2.2.2 OneWeb 任务特性 OneWeb 具有众多颠覆传统卫星行业的任务特性，一是其实时覆盖性；二是其理智的运营策略；三是大规模生产和发射部署的革命性举措；四是巨大的实施风险。 1). 实时覆盖性：与铱星一样，OneWeb 采用了极轨道，每颗卫星设计了 16 个 Ku 用户波束，从而实现了对全球的无缝覆盖，使得不论何时身处何处，都能接收到 OneWeb 卫星提供的无线信号。由于低轨道卫星的运动速度非常快，大概在 7km/s 水平，所以用户其实是在不断地更换通讯的卫星，通过波束的多重覆盖，可以使用户感觉不到这种“漫游”，保证通讯等质量。说是这么说，效果还要拭目以待，全波束覆盖并不能彻底解决跨波束的漫游切换（hangover）问题。跨波束跨卫星的切换对于卫星来说由于其相对地面运动速度较大，终端与节点在三维空间中的随机与可预测运动轨迹与相对速度的快速变化将导致三维角速度快速变化和多普勒频移造成链路捕获与跟踪的困难，需要通过接入控制进行链路适配与切换控制，支持其链路层协议的识别，切换、链路调制。并采用类似于移动 IP 的方法进行移动性管理。此外，OneWeb 官方声称通过 Progressive Pitch 技术能逐步改变 LEO 卫星信号发射的方向和电平值，因而能有效消除对 GEO 卫星的干扰。然而，事实的结果是，GEO 的影响还是很难避免的，需要 GEO 的卫星降低发生功率，所以还有很多需要协调的事情。 图 12: OneWeb 波束覆盖示意 2). 理智的运营策略：OneWeb 并没有像铱星一样提供小型化终端的解决方案，直接为用户提供移动连接，而是与网络运营商合作，通过社区进行网络服务的提供，这种模式成为 B2B 通讯服务。也就是说，OneWeb 是对现有的网络运营商提供在空间覆盖上经济可行的一套解决方案，由于其定位准确所以很顺利就拿到了 5 亿美元前期投资。 图 13: OneWeb B2B 通讯服务 OneWeb 主要的应用场景包括：a) 应急网络连接，全球通讯保障；b) 高空高速低延迟宽带网络；c) 通过车载终端提供 200 米覆盖的 LTE 网络; d) 偏远地区家庭，学校固定网络，解决了光纤成本过高的问题；e) 乡间无线网络运营。 图 14: 应急网络连接，全球通讯保障 图 15: 高空高速低延迟宽带网络 图 16: 通过车载终端提供 200 米覆盖的 LTE 网络 图 17: 偏远地区家庭，学校固定网络，解决了光纤成本过高的问题 图 18: 乡间无线网络运营 3). 卫星大规模生产发射的革命性举措：OneWeb 卫星将精简设计的理念发挥到了极致，但是面对后续需要每天生产 3~5 颗卫星，每周生产 20 颗卫星的巨大产能要求，在航天界还是前所未有的。很多卫星甚至可能在生产出来的当天就被发射升空。如今 OneWeb 最大的合作方 Airbus，在图卢兹的工厂已经动工，首批 6 颗试验星以完成研制，即将发射升空。同时研制高度自动化的机器人生产线单元，以及利用人工智能实现对生产流程的优化。 图 19: 图卢兹与佛罗里达工厂关系示意图 同时在佛罗里达的卫星工厂实施计划也提上了日程，并与佛州达成了协议。工厂面积（包括生产区、检测区、装配区等）占地约 14 亩，将来的 900 颗卫星就将在这里生产。由于生产流程高度自动化，只需要招募 250 名左右的技术人员。 图 20: 佛罗里达工厂示意图 4). 巨大的实施风险 图 21: 航天是高风险行业 发射风险： 虽然商业航天现在异常繁荣，但是航天毕竟不是过家家，很多繁杂的流程看起来虽然耗费人力物力，但也是为了保证成功率与安全性。 生产风险：OneWeb 签约了多家发射公司，而且卫星制造时间短，测试流程简单，所以埋下了很大的安全隐患。至今并没有了解到他们具体的卫星生产流程，这么短的研制周期，必然会带来很高的风险。而且这么短的时间生产如此之多卫星本身就是一件非常困难多事情，如果成功就是里程碑意义的事件。 部署与碰撞规避风险：OneWeb 卫星首先被发射到 500km 停泊轨道，从 500km 使用电推进进入 1200km 工作轨道。期间电推进系统将持续工作很长一段时间，对其整体可靠性是极大的挑战。此外，在 500km 到 1200km 之间分布着大量的 LEO 卫星和空间碎片，这必将大大增加空间撞击事件发生的概率，造成双方巨大的损失以及大量二次碎片的产生。且星座的构型决定了 720 颗卫星在两极上方过于密集，相相邻卫星相对相位控制范围只有 ±0.25°，若不进行频繁的相位保持控制，极易发生碰撞。 商业风险：O3b 提供的网络填补性很明显，所以准确的定位使得该项目很成功，然而 OneWeb 其实存在要么运营成本过高、要么用户有限的问题。其巨大的规模必然容易和地面网络形成竞争关系，这样就有可能因为成本或用户体验而败下阵来。 2.2.3 OneWeb 总结 OneWeb 是一个让人心潮澎湃的伟大工程，同时它开创一种卫星全新的生产模式与运营理念。然而，其庞大的星座规模也存在巨大的商业风险。 OneWeb 在 2015 年对单星造价的期望值是 50 万美元，而近期将单星提高至 100 万美元，从成立起至今公司 CEO 已经换了 3 任，第四任 CEO Adrian Steckel 也将于今年 9 月走马上任。目前，公司虽然获得软银、空客等多家金融巨头的巨额投资，但由于单星制造成本比预估翻倍，资金已出现巨大缺口，且公司后续的融资进展并不明晰，原计划的首发时间不断跳票，这使得近期外界对这家公司是否最终能完成星座组网、提供全球实时通信网有或多或少的质疑。但公司创始人 Greg Wyler 表示，OneWeb 卫星功能强大，有很多内置冗余和弹性设计，安全性可达到电信运营商应用级别，至于成本是 50 万美元还是 100 万美元，并不重要。 根最新消息，OneWeb 首批6颗卫星计划于 2019 年 2 月 27 日在法属圭亚那的库鲁航天中心采用 Soyuz ST-B/Fregat-MT 发射。那么这个被国内外媒体誉为 看起来最靠谱的空间互联网创业公司 最终是否会实现其 万物一网互联 的目标，让我们拭目以待。 2.3 StarLink 2.5 鸿雁 2.4 虹云 3 低轨移动卫星通信技术产业展望 3.1 机遇与挑战 3.1.1 机遇 潜在用户基数大（用户潜力），物联网孕育大量低轨移动通信施展拳脚的行业（产业潜力），新事物将推动就业以获得国家及地方政府的支持（资本潜力） 3.1.2 挑战 工程宏大、耗时；星座系统必须建设完整才能提供实时服务；传统星座运营任务繁重，必须进行技术创新；与地面网络系统存在竞争关系；用户接受程度；以及星座稳定运行风险和地面段开发滞后风险等。 3.2 核心资源与技术 规模化制造星座部署与自动化运维成本控制用户服务与体验 3.3 成败之关键 成败之关键在于找到自己的优势所在，充分挖掘用户需求，利用规模化制造和领先的技术优势降低运营成本，最终实现系统长期稳定运行，持续输出价值。 比如：先进的部署技术、自主运控技术等。 4 参考文献 1) “Iridium PRIME — A Constellation of Hosted Payloads” , URL: https://directory.eoportal.org/web/eoportal/satellite-missions/i/iridium-prime 2) “Iridium NEXT (Hosting Payloads on a Communications Constellation)” , URL: https://directory.eoportal.org/web/eoportal/satellite-missions/i/iridium-nexthttps://directory.eoportal.org/web/eoportal/satellite-missions/i/iridium-next 3) “OneWeb Minisatellite Constellation for Global Internet Service” , URL: https://directory.eoportal.org/web/eoportal/satellite-missions/o/oneweb 4) “看起来最靠谱的空间互联网创业公司－OneWeb” , URL: https://zhuanlan.zhihu.com/p/22577458","categories":[{"name":"航天任务","slug":"航天任务","permalink":"http://spacefan.github.io/categories/航天任务/"}],"tags":[{"name":"低轨移动通信","slug":"低轨移动通信","permalink":"http://spacefan.github.io/tags/低轨移动通信/"}]},{"title":"Orekit 航天动力学库调用方法","slug":"orekit-prop","date":"2019-01-25T12:30:00.000Z","updated":"2019-02-15T15:37:00.069Z","comments":true,"path":"2019/01/25/orekit-prop/","link":"","permalink":"http://spacefan.github.io/2019/01/25/orekit-prop/","excerpt":"Orekit 是一个基于 Java 语言开发的航天动力学库，采用对商业友好的 Apache 开源许可协议，第一个公开发行版本始于 2003 年。十多年来，Orekit 一直专注于航天动力学底层算法的实现，包含丰富的航天动力学元素：轨道、时间、参考架、姿态和事件等，以及大量处理这些元素的算法：元素转换、航天器状态预报、卫星姿态指向和事件响应等。","text":"Orekit 是一个基于 Java 语言开发的航天动力学库，采用对商业友好的 Apache 开源许可协议，第一个公开发行版本始于 2003 年。十多年来，Orekit 一直专注于航天动力学底层算法的实现，包含丰富的航天动力学元素：轨道、时间、参考架、姿态和事件等，以及大量处理这些元素的算法：元素转换、航天器状态预报、卫星姿态指向和事件响应等。 Orekit 在世界各大航天机构及一些科研院所中皆有使用，尤其在欧洲十分流行，诸如 CNES，ESA，NASA，SSTL，SSC，ISRO，Eumetsat，Airbus，Thales，Telespazio，Nexeya，U.S. Naval Research Laboratory，Texas University at Austin 等大型航天机构和科研院所都在使用，通常它作为应用软件的底层代码库，为上层实现提供航天动力学算法支持。 图 1: Orekit 项目首页 1 获取 Orekit 库 Orekit 官方网站 www.orekit.org 提供封装好的 .jar 库文件以及源码，目前最新版为 v9.3（2019 年 2 月 15 日更新），.jar 库文件可直接使用，源码可编译后使用，此处介绍 .jar 库文件的调用。 2 调用 Orekit 库 2.1 添加 Orekit 库 将 orekit-9.2.jar 添加到项目参考库即可调用 Orekit 中的所有类库，由于 Orekit 采用 Hipparchus 库进行数值运算，所以还需下载并添加该库，方法跟添加 Orekit 库一样，下载地址为 www.hipparchus.org。 图 2: 添加好的 Orekit 与 Hipparchus 库列表 2.2 添加动力学建模数据 动力学建模数据包含了 Orekit 建立动力学模型、进行时间和参考架转换以及星历计算所需要的重要参数，必须在调用 Orekit 下属类库之前加载，配置代码如下所示。代码中的文件路径根据具体情况修改。12345678910111213// configure OrekitFile home = new File(\"D:/CodeProjects/eclipse_java/Orekit\");File orekitData = new File(home, \"orekit-data\");if (!orekitData.exists()) &#123; System.err.format(Locale.US, \"Failed to find %s folder%n\", orekitData.getAbsolutePath()); System.err.format(Locale.US, \"You need to download %s from the %s page and unzip it in %s for this tutorial to work%n\", \"orekit-data.zip\", \"https://www.orekit.org/forge/projects/orekit/files\", home.getAbsolutePath()); System.exit(1); &#125;DataProvidersManager manager = DataProvidersManager.getInstance();manager.addProvider(new DirectoryCrawler(orekitData)); 3 轨道预报 作为航天动力学库，Orekit 最基本的功能性算法就是对航天器状态矢量进行预报，该功能由 org.orekit.propagation 包提供。Orekit 有三种预报方式，一是解析法预报，由 org.orekit.propagation.analytical 实现；二是数值法预报，由 org.orekit.propagation.numerical 和 org.orekit.propagation.integration 实现；三是半解析法预报，由 org.orekit.propagation.semianalytical.dsst 实现。 解析法预报速度快，但精度随时间下降快，且需要平根或拟平根作为预报输入，即需要事先定轨；数值法通过求解轨道动力学方程实现，模型精确的情况下，预报精度高，但由于必须递推中间过程量，故需消耗较多的计算资源；半解析法速度和精度都介于解析法和数值法之间，一般用于卫星轨道寿命与离轨分析，本文不作介绍。 3.1 轨道描述 Orekit 中的轨道描述由 org.orekit.orbits 包提供，该包是构建航天动力学相关程序的基础。从 v3.0 开始，Orekit 就支持多种轨道描述，包括：经典开普勒轨道 KeplerianOrbit、圆轨道 CircularOrbit、赤道轨道 EquinoctialOrbit 以及三维状态矢量 CartesianOrbit。 经典开普勒轨道描述：KeplerianOrbit 1). a：轨道半场轴（m） 2). e：轨道偏心率（NAN） 3). i：轨道倾角（rad） 4). \\omega：近地点幅角（rad） 5). \\Omega：升交点赤经（rad） 6). \\nu，E or M：真近角、偏近角或平近角（rad） 圆轨道描述：CircularOrbit 1). a：轨道半场轴（m） 2). e_x：偏心率矢量 X 分量（NAN），e_x = e\\times cos(\\omega) 3). e_y：偏心率矢量 Y 分量（NAN），e_y = e\\times sin(\\omega) 4). i：轨道倾角（rad） 5). \\Omega：升交点赤经（rad） 6). u_\\nu，u_E or u_M：真纬度幅角（\\omega + \\nu）、偏纬度幅角（\\omega + E）和平纬度幅角（\\omega + M）（rad） 赤道轨道：EquinoctialOrbit 1). a：轨道半场轴（m） 2). e_x：偏心率矢量 X 分量（NAN），e_x = e \\times cos(\\omega) 3). e_y：偏心率矢量 Y 分量（NAN），e_y = e \\times sin(\\omega) 4). i_x：倾角矢量 X 分量（NAN），h_x = tan(i/2) \\times cos(\\Omega) 5). i_y：倾角矢量 Y 分量（NAN），h_y = tan(i/2) \\times sin(\\Omega) 5). \\Omega：升交点赤经（rad） 6). l_\\nu，l_E or l_M：真纬度幅角（\\omega +\\nu + \\Omega）、偏纬度幅角（\\omega + E + \\Omega）和平纬度幅角（\\omega + M + \\Omega）（rad） 三维状态矢量：CartesianOrbit 1). X, Y, Z：位置矢量（m） 2). V_x, V_y, V_z：速度矢量（m/s） 3.2 轨道预报流程 3.2.1 输入参数 四种轨道描述方法定义的轨道根数都可以作为轨道预报的输入，采用 Orbit 关键字进行定义。开普勒轨道根数定义方法如下：12double mu = 3.986004415e+14；Orbit kepOrbit = new KeplerianOrbit(a, e, i, omega, raan, M, PositionAngle.MEAN, Frame, Date, mu); 代码中，M 对应 PositionAngle.MEAN，即表示平近角，真近角和偏近角分别用 PositionAngle.TURE 和 PositionAngle.ECCENTRIC 表示；mu 为中心天体引力常数，Frame 为参考架，J2000 坐标系用 FramesFactory.getEME2000() 表示，遵循 IERS 2010 约定的地球固连坐标系，简称地固系，用 FramesFactory.getTIRF(IERSConventions.IERS_2010) 表示；Date 为时间，采用如下代码初始化： 1AbsoluteDate Date = new AbsoluteDate(yr, mt, day, hr, min, sec, TimeScalesFactory.getUTC()); 类似地，圆轨道根数定义方法如下： 12double mu = 3.986004415e+14；Orbit cirOrbit = new CircularOrbit(a, ex, ey, i, raan, u, PositionAngle.MEAN, Frame, Date, mu); 赤道轨道根数定义方法如下： 12double mu = 3.986004415e+14；Orbit equOrbit = new EquinoctialOrbit(a, ex, ey, hx, hy, l, PositionAngle.MEAN, Frame, Date, mu); 三维状态矢量定义方法如下： 123double mu = 3.986004415e+14；PVCoordinates catPV = new PVCoordinates(new Vector3D, new Vector3D);Orbit catOrbit = new CartesianOrbit(catPV, Frame, Date, mu); 代码中，catPV 为状态矢量。根据轨道数据的来源，选择对应的轨道描述方式。 3.2.2 建立轨道预报器 Orekit 提供多种解析法预报器，由 org.orekit.propagation.analytical 包实现，最简单的为基于 二体模型 的解析法预报器： 1KeplerianPropagator tbProp = new KeplerianPropagator(Orbit initialOrbit); 较为复杂的解析法预报器基于 EcksteinHechler 模型： 123456789double referenceRadius = 6378136.3;double mu = 3.986004415e+14；double c20 = -0.484165143790815e-03；double c30 = 0.957161207093473e-06；double c40 = 0.539965866638991e-06；double c50 = 0.686702913736681e-07；double c60 = -0.149953927978527e-06EcksteinHechlerPropagator ehProp = new EcksteinHechlerPropagator(Orbit initialOrbit, referenceRadius, mu, c20, c30, c40, c50, c60); Orekit 数值预报器由 org.orekit.propagation.numerical 包实现，定义方法如下： 1NumericalPropagator propagator = new NumericalPropagator(integrator); 参数 integrator 较具有多种选择，通用型高精度积分器可选择 PD 系列中的 DormandPrince853Integrator，定义方法如下： 12345678final double minStep = 0.001;final double maxstep = 100.0;final double positionTolerance = 1.0e-13;final OrbitType propagationType = OrbitType.KEPLERIAN;final double[][] tolerances = NumericalPropagator.tolerances(positionTolerance, initialOrbit, propagationType);AdaptiveStepsizeIntegrator integrator = new DormandPrince853Integrator(minStep, maxstep, tolerances[0], tolerances[1]); 此外，数值轨道预报，还需要设置动力学模型，一般只考虑地球引力场： 1234final NormalizedSphericalHarmonicsProvider provider = GravityFieldFactory.getNormalizedProvider(20, 20);ForceModel holmesFeatherstone = new HolmesFeatherstoneAttractionModel(FramesFactory.getITRF(IERSConventions.IERS_2010, true), provider); 更多力学模型的设置参考 API 文档中的 NumericalPropagator 类：orekit-9.2-javadoc/org/orekit/propagation/numerical/NumericalPropagator.html。 3.2.3 执行轨道预报 执行预报语句，获取指定时间的轨道根数 currentState： 1234567891011121314151617SpacecraftState currentState = kepler.propagate(extrapDate);java也可构建循环语句，以定步长预报指定时间段的轨道根数：```javadouble duration = 600.;AbsoluteDate finalDate = initialDate.shiftedBy(duration);double stepT = 60.;int cpt = 1; extrapDate.compareTo(finalDate) &lt;= 0; extrapDate = extrapDate.shiftedBy(stepT)) &#123; SpacecraftState currentState = kepler.propagate(extrapDate); System.out.println(\"step \" + cpt++); System.out.println(\" time : \" + currentState.getDate()); System.out.println(\" \" + currentState.getOrbit());&#125; 数值法预报器于解析法稍有不同，是通过 StepHandler 执行数据操作的： 12345propagator.addForceModel(holmesFeatherstone);propagator.setInitialState(initialState);propagator.setMasterMode(60., new TutorialStepHandler());SpacecraftState finalState = propagator.propagate(initialDate.shiftedBy(600)); 4 总结 本文介绍了 Orekit 航天动力学库的调用方法，并简单阐述了其轨道预报方法，可作为相关应用软件开发的入门级参考。","categories":[{"name":"专业技能","slug":"专业技能","permalink":"http://spacefan.github.io/categories/专业技能/"}],"tags":[{"name":"Orekit","slug":"Orekit","permalink":"http://spacefan.github.io/tags/Orekit/"}]},{"title":"史上最强的5G介绍，外行业看完也秒懂","slug":"5G_intro","date":"2018-12-05T14:32:00.000Z","updated":"2019-02-13T14:21:09.150Z","comments":true,"path":"2018/12/05/5G_intro/","link":"","permalink":"http://spacefan.github.io/2018/12/05/5G_intro/","excerpt":"今天的故事，从一个公式开始讲起，一个简单且神奇的公式。 这是一个既简单又神奇的公式。说它简单，是因为它一共只有3个字母。而说它神奇，是因为这个公式蕴含了博大精深的通信技术奥秘，这个星球上有无数的人都在为之魂牵梦绕。 这个公式，就是它：c = \\lambda \\times \\nu。","text":"今天的故事，从一个公式开始讲起，一个简单且神奇的公式。 这是一个既简单又神奇的公式。说它简单，是因为它一共只有3个字母。而说它神奇，是因为这个公式蕴含了博大精深的通信技术奥秘，这个星球上有无数的人都在为之魂牵梦绕。 这个公式，就是它：c = \\lambda \\times \\nu。 我相信很多同学都认出这个公式了，如果没认出来，而且你又是一个理科生的话，请记得有空多给你的中学物理老师打打电话！ 解释一下，上面这个公式，这是物理学的基本公式，光速=波长×频率。 对于这个公式，可以这么说：无论是1G、2G、3G，还是4G、5G，万变不离其宗，全部都是在它身上做文章，没有跳出它的“五指山”。且听我慢慢道来。 有线？无线？ 通信技术，无论什么黑科技白科技，归根到底，就分为两种 —— 有线通信 和 无线通信。 我和你打电话，信息数据要么在空中传播（看不见、摸不着），要么在实物上传播（看得见、摸得着）。 如果是在实体物质上传播，就是有线通信，基本上就是用的铜线、光纤这些线缆，统称为有线介质。 在有线介质上传播数据，速率可以达到很高的数值。 以光纤为例，在实验室中，单条光纤最大速度已达到了26Tbps，是传统网线的两万六千倍。 图注：光纤，单条最大速度已达到了26Tbps 而空中传播这部分，才是移动通信的瓶颈所在。 目前主流的移动通信标准，是4G LTE，理论速率只有150Mbps（不包括载波聚合）。这个和有线是完全没办法相比的。 所以，5G如果要实现端到端的高速率，重点是突破无线这部分的瓶颈。 好大一个波 大家都知道，无线通信就是利用电磁波进行通信。电波和光波，都属于电磁波。 电磁波的功能特性，是由它的频率决定的。不同频率的电磁波，有不同的属性特点，从而有不同的用途。 例如，高频的γ射线，具有很大的杀伤力，可以用来治疗肿瘤。 图注：电磁波的不断频率 我们目前主要使用电波进行通信。当然，光波通信也在崛起，例如LiFi。 图注：LiFi（Light Fidelity），可见光通信 不偏题，回到电波先。 电波属于电磁波的一种，它的频率资源是有限的。 为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途。 图注：不同频率电波的用途 请大家注意上面图中的红色字体。一直以来，我们主要是用 中频~超高频 进行手机通信的。 例如经常说的“GSM900”、“CDMA800”，其实意思就是指，工作频段在900MHz的GSM，和工作频段在800MHz的CDMA。 目前全球主流的4G LTE技术标准，属于特高频和超高频。 我们国家主要使用超高频： 大家能看出来，随着1G、2G、3G、4G的发展，使用的电波频率是越来越高的。 这是为什么呢？ 这主要是因为，频率越高，能使用的频率资源越丰富。频率资源越丰富，能实现的传输速率就越高。 图注：更高的频率→更多的资源→更快的速度 应该不难理解吧？频率资源就像车厢，越高的频率，车厢越多，相同时间内能装载的信息就越多。 那么，5G使用的频率具体是多少呢？ 如下图所示： 5G的频率范围，分为两种：一种是6GHz以下，这个和目前我们的2/3/4G差别不算太大。还有一种，就很高了，在24GHz以上。 目前，国际上主要使用28GHz进行试验（这个频段也有可能成为5G最先商用的频段）。 如果按28GHz来算，根据前文我们提到的公式： 好啦，这个就是5G的第一个技术特点—— 毫 米 波 请允许我再发一遍刚才那个频率对照表： 图注：不同频率电波的用途 请注意看最下面一行，是不是就是“毫米波”？ 继续，继续！ 好了，既然，频率高这么好，你一定会问：“为什么以前我们不用高频率呢？” 原因很简单——不是不想用，是用不起。 电磁波的显著特点：频率越高，波长越短，越趋近于直线传播（绕射能力越差）。频率越高，在传播介质中的衰减也越大。 你看激光笔（波长635nm左右），射出的光是直的吧，挡住了就过不去了。 再看卫星通信和GPS导航（波长1cm左右），如果有遮挡物，就没信号了吧。 图注：卫星那口大锅，必须校准瞄着卫星的方向，否则哪怕稍微歪一点，都会影响信号质量。 移动通信如果用了高频段，那么它最大的问题，就是传输距离大幅缩短，覆盖能力大幅减弱。 覆盖同一个区域，需要的5G基站数量，将大大超过4G。 基站数量意味着什么？钱啊！投资啊！成本啊！ 频率越低，网络建设就越省钱，竞争起来就越有利。这就是为什么，这些年，电信、移动、联通为了低频段而争得头破血流。 有的频段甚至被称为——黄金频段。 这也是为什么，5G时代，运营商拼命怼设备商，希望基站降价。（如果真的上5G，按以往的模式，设备商就发大财了。） 所以，基于以上原因，在高频率的前提下，为了减轻网络建设方面的成本压力，5G必须寻找新的出路。 出路有哪些呢？ 首先，就是微基站。 微 基 站 基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！ 宏基站： 图注：室外常见，建一个覆盖一大片 微基站： 图注：看上去是不是很酷炫？ 图注：还有更小的，巴掌那么大 其实，微基站现在就有不少，尤其是城区和室内，经常能看到。 以后，到了5G时代，微基站会更多，到处都会装上，几乎随处可见。 你肯定会问，那么多基站在身边，会不会对人体造成影响？ 我的回答是——不会。 其实，和传统认知恰好相反，事实上，基站数量越多，辐射反而越小！ 你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好？ 大功率方案▼ 小功率方案▼ 上面的图，一目了然了。基站小，功率低，对大家都好。如果只采用一个大基站，离得近，辐射大，离得远，没信号，反而不好。 天线去哪了？ 大家有没有发现，以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么现在我们的手机都没有天线了？ 其实，我们并不是不需要天线，而是我们的天线变小了。 根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。 随着时间变化，我们手机的通信频率越来越高，波长越来越短，天线也就跟着变短啦！ 毫米波通信，天线也变成毫米级。。。 这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根。。。 这就是5G的第三大杀手锏—— Ｍassive MIMO（多天线技术） MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。 在LTE时代，我们就已经有MIMO了，但是天线数量并不算多，只能说是初级版的MIMO。 到了5G时代，继续把MIMO技术发扬光大，现在变成了加强版的Massive MIMO（Massive：大规模的，大量的）。 手机里面都能塞好多根天线，基站就更不用说了。 以前的基站，天线就那么几根： 5G时代，天线数量不是按根来算了，是按“阵”。。。“天线阵列”。。。一眼看去，要得密集恐惧症的节奏。。。 不过，天线之间的距离也不能太近。 因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。如果距离近了，就会互相干扰，影响信号的收发。 你是直的？还是弯的？ 大家都见过灯泡发光吧？ 其实，基站发射信号的时候，就有点像灯泡发光。 信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。。。 基站也是一样，大量的能量和资源都浪费了。 我们能不能找到一只无形的手，把散开的光束缚起来呢？ 这样既节约了能量，也保证了要照亮的区域有足够的光。 答案是：可以。 这就是—— 波 束 赋 形 波束赋形: 在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。 直的都能掰成弯的。。。还有什么是通信砖家干不出来的？ 别收我钱，行不行？ 在目前的移动通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。。。 而在5G时代，这种情况就不一定了。 5G的第五大特点——D2D，也就是Device to Device（设备到设备）。 D 2 D 5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。。。 这样，就节约了大量的空中资源，也减轻了基站的压力。 不过，如果你觉得这样就不用付钱，那你就图样图森破了。 控制消息还是要从基站走的，你用着频谱资源，运营商爸爸怎么可能放过你。。。&#x1f604; &#x1f604; &#x1f604; 后记 相信大家通过本文，对5G和她背后的通信知识已经有了深刻的理解。而这一切，都只是源于一个小学生都能看懂的数学公式。不是么？ 通信技术并不神秘，5G作为通信技术皇冠上最耀眼的宝石，也不是什么遥不可及的创新革命技术，它更多是对现有通信技术的演进。 正如一位高人所说—— 通信技术的极限，并不是技术工艺方面的限制，而是建立在严谨数学基础上的推论，在可以遇见的未来是基本不可能突破的。 如何在科学原理的范畴内，进一步发掘通信的潜力，是通信行业众多奋斗者们孜孜不倦的追求。","categories":[{"name":"科技前沿","slug":"科技前沿","permalink":"http://spacefan.github.io/categories/科技前沿/"}],"tags":[{"name":"5G通信","slug":"5G通信","permalink":"http://spacefan.github.io/tags/5G通信/"}]},{"title":"CodeBlocks v17.12 界面汉化与编辑器主题美化","slug":"Codeblocksv1712","date":"2018-11-30T14:51:00.000Z","updated":"2018-12-06T14:12:55.356Z","comments":true,"path":"2018/11/30/Codeblocksv1712/","link":"","permalink":"http://spacefan.github.io/2018/11/30/Codeblocksv1712/","excerpt":"Code::Blocks 是一个非常优秀的 IDE，它轻巧、强大、跨平台，且紧跟标准，最新版更是加入了对 Qt5 的支持。然而，这么一个令人爱不释手的 IDE 竟无汉化，编辑器主题界面也十分简陋，于是便有了本博文。 本文将以 Code::Blocks v17.12 为对象，介绍其菜单汉化及编辑器主题优化方法，配置后的软件有助于我们更赏心悦目度撸代码。&#x1f604; &#x1f604; &#x1f604;","text":"Code::Blocks 是一个非常优秀的 IDE，它轻巧、强大、跨平台，且紧跟标准，最新版更是加入了对 Qt5 的支持。然而，这么一个令人爱不释手的 IDE 竟无汉化，编辑器主题界面也十分简陋，于是便有了本博文。 本文将以 Code::Blocks v17.12 为对象，介绍其菜单汉化及编辑器主题优化方法，配置后的软件有助于我们更赏心悦目度撸代码。&#x1f604; &#x1f604; &#x1f604; 一、界面汉化 1.1 下载 Code::Blocks 汉化包 首先，大家需要下载一个 Code::Blocks 汉化包，下载链接: https://pan.baidu.com/s/1sniGc01 （提取码: 7e9m）。 1.2 汉化 Code::Blocks 1) 汉化包下载完成后，是一个压缩包，将其解压，其中包含有一个 locale 文件夹，如下图所示，这是我们需要的。 2) 进入 Code::Blocks 安装目录（其默认安装目录为 C:\\Program Files (x86)\\CodeBlocks），依次进入 share —&gt; CodeBlocks 文件夹，然后将解压汉化包得到的 locale 文件夹，复制到 CodeBlocks 文件夹下，如下图所示： 如果上述过程，你都没有打开 Code::Blocks，这个时候你直接打开，应该就可以看到，你的 Code::Blocks 已经汉化成功啦。如果还没有成功，继续以下操作。 1.3 更改Code::Blocks设置 1) 打开 Code::Blocks，选择 “Settings —&gt; Environmen”，如下图所示： 2) 会弹出用于设置 Code::Blocks 的对话框，如下图所示： 选择 View 选项，勾选 Internationalization 选项，同时选择其中的 Chinese(Simplified)。然后点击 OK 按钮。设置完成后，直接重新启动 Code::Blocks，此时 Code::Blocks 会出现一个提示框，提示你是否保存更改，选择保存即可。 3) 再次启动 Code::Blocks，你会看到全新的汉化的 Code::Blocks，虽然没有完全汉化，但起码不会影响日常的正常使用。 二、编辑器主题美化 2.1 替换配置文件 在C盘下搜索文件default.conf（先去文件夹选项里勾上显示隐藏的系统文件），用文本编辑器打开，搜索标签，用记事本打开default.conf，把这个主题网址的下面的所有代码都覆盖复制进去（建议把原来的default文件名字改为备份，以留后用）。 http://wiki.codeblocks.org/index.php?title=Syntax_highlighting_custom_colour_themes 一般这个文件地址是C:\\用户\\（你电脑的用户名）\\AppData\\Roaming\\CodeBlocks\\default.conf，可以用 Everything 搜索。 在此期间Code::Blocks需要关闭，不然会被改回去。 2.2 稍作修改 可能用新的界面风格会看不到光标，这个在Code::Blocks内修改，Settings-&gt;Configure editor-&gt;Margins and caret-&gt;Caret-&gt;Colour，选择一个可以辨识的颜色，比如白色。并将宽度设为3（或者更宽）。 2.3 修改字体 字体修改在 Settings-&gt;Configure editor-&gt;General settings-&gt;Font，点击Choose，在里面选择。最后主题自己选定一个保存再打开 Code::Blocks 新建一个文件或者工程就可以看到主题样式已经发生改变。 2.4 代码缩进指示线 如下图修改一下就有这种效果（可能汉化包不一样，反正倒数第三个选项打勾应该就可以了）。 效果如图： 三、总结 汉化后的界面和美化后的编辑器主题有利于我们写出更优秀的代码，至此，打完收工。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://spacefan.github.io/categories/编程语言/"}],"tags":[{"name":"Code::Blocks","slug":"Code-Blocks","permalink":"http://spacefan.github.io/tags/Code-Blocks/"}]},{"title":"基于 JavaScript 的 GIS 开发库 Cesium","slug":"cesium-intro","date":"2018-06-30T12:50:00.000Z","updated":"2018-07-01T23:43:32.076Z","comments":true,"path":"2018/06/30/cesium-intro/","link":"","permalink":"http://spacefan.github.io/2018/06/30/cesium-intro/","excerpt":"Cesium 是一个用来在 Web 浏览器中创建三维地球与二维地图的 JavaScript 库，Cesium 开发的应用不需要任何浏览器插件的支持即可运行。Cesium 使用 WebGL 进行硬件图形加速，并且跨平台，跨浏览器，适合用来进行动态数据可视化。","text":"Cesium 是一个用来在 Web 浏览器中创建三维地球与二维地图的 JavaScript 库，Cesium 开发的应用不需要任何浏览器插件的支持即可运行。Cesium 使用 WebGL 进行硬件图形加速，并且跨平台，跨浏览器，适合用来进行动态数据可视化。 &#x1f44d; 核心功能 地理空间动态可视化 使用 CZML 数据驱动的、时间动态的场景 世界范围的高精度地形可视化； 使用 WMS、TMS、OpenStreetMaps、Bing 及 Esri 标准绘制影像图层； 使用 GeoJSON 和 TopoJSON 绘制矢量数据； 使用 COLLADA 和 glTF 绘制三维模型； 使用 插件 来扩展 Cesium。 为性能和精度进行设计 使用硬件加速的方式，通过批处理和效率选择来优化 WebGL； 绘制多种几何图形，包括 polylines、polygons、billboards、labels、extrusions 和 corridors； 控制相机并创建飞行路径； 使用标准小部件控制动画时间，选择图像图层并缩放到某个位置。 一个API，三种视图 Cesium 支持采用同一 API 实现三维（全球）、2.5维（Columbus视图）及二维（地图）三种视图 &#x1f680; 快速开始 访问 下载页面 或者使用 npm 安装 Cesium :1$ npm install cesium 有任何问题都可以在 论坛 提出。如果对项目开发贡感兴趣，可以进一步阅读 CONTRIBUTING.md。 &#x2764; &#x2744; 项目使命 Cesium 的使命是为静态和时间动态内容创建领先的三维地球仪和地图，具有最佳性能，精度，视觉质量，平台支持，社区和易用性。 &#x1f4d7; 使用许可 Cesium 使用 Apache 2.0 许可协议，对于商业和非商业用户都是免费的。 &#x1f44f; 特性展示 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#x1f44f; 演示项目 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;","categories":[{"name":"专业技能","slug":"专业技能","permalink":"http://spacefan.github.io/categories/专业技能/"}],"tags":[{"name":"Cesium","slug":"Cesium","permalink":"http://spacefan.github.io/tags/Cesium/"}]},{"title":"Hexo 博客使用 emoji 表情","slug":"hexo-emoji","date":"2018-06-30T09:30:00.000Z","updated":"2018-06-30T14:47:09.596Z","comments":true,"path":"2018/06/30/hexo-emoji/","link":"","permalink":"http://spacefan.github.io/2018/06/30/hexo-emoji/","excerpt":"将 Markdown 转化为 html 的过程叫做 Markdown 渲染，对应的插件叫做 Markdown 渲染引擎。在 Hexo 中默认的 Markdown 渲染器是 hexo-renderer-marked，这个渲染器不支持 emoji 表情。本文利用 hexo-filter-github-emojis 在博客中实现 emoji 表情。","text":"将 Markdown 转化为 html 的过程叫做 Markdown 渲染，对应的插件叫做 Markdown 渲染引擎。在 Hexo 中默认的 Markdown 渲染器是 hexo-renderer-marked，这个渲染器不支持 emoji 表情。本文利用 hexo-filter-github-emojis 在博客中实现 emoji 表情。 1. 插件安装 使用以下命令安装 hexo-filter-github-emojis 插件：1$ npm install hexo-filter-github-emojis --save 2. 启用插件 向站点配置文件 hexo_root\\_config.yml 中添加如下设置：12345678githubEmojis: enable: true className: github-emoji unicode: true styles: display: inline vertical-align: middle # Freemind适用 localEmojis: 具体的每个配置项含义参见 说明文档。 3. 使用方法 在 emoji-cheat-sheet 中找到你想要的表情，然后点击即可复制。使用方法和 GitHub 一样，比如你想发一个笑脸 &#x1f604; 直接输入笑脸对应的 emoji 编码 :smile： 就可以。来一波表情 &#x1f60d; &#x1f604; &#x1f602; &#x2728; &#x1f3b5; &#x1f44c; &#x1f44d; &#x1f49c;&#x1f46b; &#x1f4a7; &#x2600; &#x1f43c; &#x1f426; &#x1f31a; &#x1f30f; &#x1f4de; &#x1f52b; &#x1f52d; &#x1f6b4; &#x1f345; &#x1f680; &#x1f1e8;&#x1f1f3; &#x1f21a; &#x1f233; &#x1f6af; &#x264e; &#x00a9;。","categories":[{"name":"Hexo建站","slug":"Hexo建站","permalink":"http://spacefan.github.io/categories/Hexo建站/"}],"tags":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://spacefan.github.io/tags/Hexo教程/"}]},{"title":"开放航空航天仿真工具集锦","slug":"OpenTools","date":"2018-06-28T04:00:00.000Z","updated":"2018-12-06T14:06:43.361Z","comments":true,"path":"2018/06/28/OpenTools/","link":"","permalink":"http://spacefan.github.io/2018/06/28/OpenTools/","excerpt":"小时候，晴朗的天空总是蔚蓝，就连那连绵不断的山峰也无法遮挡住那深邃的远方。曾几何时，天空中偶尔会飞过一架飞机，于是众小伙伴奔走相告，哪怕飞机的轰鸣早已响彻耳旁。有时，我们会目不转睛地望着飞机，直到它飞出视野范围之外，并梦想着有一天能够像飞机一样在天空中翱翔，到我们想去的远方。 依稀记得，那些年，为了躲避夏日的炎热，我们姐妹三人常常在优静的晚上躺在繁星闪烁的夜空下，仰望宇宙的苍穹。那时，我们的视力好到可以看见亮度十分暗淡的人造卫星飞越上空。而为了等待流星划过夜空的美丽瞬间，我们更是轮流看守，不放过任何一次机会。令我们感到十分惊讶的是，我们几乎总是能在深夜欣赏到流星划过的瞬间，甚至有时还会中头奖，来一次令人激动不已的流星雨。 童年纵然逝去，但我相信每个人心中都有个孩子，每个人心中都留有一份童真，每个人心中都深藏童年的美好记忆。现在看来，长大可并不是一件好事，但是爸妈却不这么想，天天盼望着我们长大成人，并能有所作为。","text":"小时候，晴朗的天空总是蔚蓝，就连那连绵不断的山峰也无法遮挡住那深邃的远方。曾几何时，天空中偶尔会飞过一架飞机，于是众小伙伴奔走相告，哪怕飞机的轰鸣早已响彻耳旁。有时，我们会目不转睛地望着飞机，直到它飞出视野范围之外，并梦想着有一天能够像飞机一样在天空中翱翔，到我们想去的远方。 依稀记得，那些年，为了躲避夏日的炎热，我们姐妹三人常常在优静的晚上躺在繁星闪烁的夜空下，仰望宇宙的苍穹。那时，我们的视力好到可以看见亮度十分暗淡的人造卫星飞越上空。而为了等待流星划过夜空的美丽瞬间，我们更是轮流看守，不放过任何一次机会。令我们感到十分惊讶的是，我们几乎总是能在深夜欣赏到流星划过的瞬间，甚至有时还会中头奖，来一次令人激动不已的流星雨。 童年纵然逝去，但我相信每个人心中都有个孩子，每个人心中都留有一份童真，每个人心中都深藏童年的美好记忆。现在看来，长大可并不是一件好事，但是爸妈却不这么想，天天盼望着我们长大成人，并能有所作为。 童年对头顶上那片天空产生的特殊情怀使得我踏上了航空航天的学习道路，然而多年以来却术无专攻、学无所成。唯一值得欣慰的是，这么多年来，我学会了一个原则，那就是做任何事都不要首先尝试重新发明轮子，而要学着制造汽车。用牛顿先生的话说，就是：“如果说我比别人看得更远些，那是因为我站在了巨人的肩膀上。”于是，当我需要某种工具时，必先用 Google 搜寻一番，哪怕是 Bing 也是可以的。时至今日才猛然发现，在开放的世界竟然有那么多实用的工具可以为我所用，即使是专业特性超强的航空航天领域。 本文并非一篇教读者如何在庞杂的信息世界里搜索合适的工具，而是直接授之以鱼，将笔者已知的航空航天领域十分优秀的开放仿真工具介绍给大家，并辅以相应的入门级教程。这其实是一项十分艰难的工作，因为大部分开放软件的文档都较为匮乏，且绝大多数由英文写成。这倒不是致命伤，关键在于，笔者不可能把每一款软件都学会，然后写出教程。从时间和精力的角度来讲，这都是不现实的。所以本文将重点对功能相对强大且笔者认为十分有研究价值的工具软件展开介绍，希望能抛砖引玉，吸引更多的爱好者加入到本文的撰写过程中来。 本文定性为航空航天仿真工具的相关介绍和研究，主要涉及航空航天领域大量优秀的开放仿真软件，不会涉及任何与开放硬件相关的话题。这里的开放是指读者可以免费获取资源，而无需为其支付任何使用费用。文中介绍的工具包含了很多开源的软件，而开源是开放的子集，开源的软件绝大多数是免费的。此外，开源软件最鲜明的特点是其源代码必定公开，并可以通过互联网或其它媒介自由获取。书中并不包含那些停止开发或多年未曾更新的工具软件，因为笔者认为，只有历经岁月的洗礼，才能称得上优秀，并最具研究价值。原则上，长达五年未曾更新的软件不会出现在本文的分类之中，已经包含在本文中的软件如果在未来五年之内不再更新，亦将在下一次更新过程中被剔除。 是开源赋予了这个时代更多的活力，而开放则将知识的种子播撒开来。知识本就不应该被束之高阁，即使是本文所讨论的航空航天。衷心地希望本文能够帮助读者了解航空航天，了解开放的世界，并最终找到自己钟爱的航空航天仿真工具。 第零篇 基本信息 0.1 版本信息 0.1.1 更新记录 2016/03/20 v1.0 建立基本框架，对每款软件进行较为完整的介绍，并不涉及任何操作实践，甚至不包括如何安装软件。 0.1.2 写作计划 2019/04/05 v1.1 添加 OpenRocket 安装教程。 2019/04/15 v1.2 添加 Orbiter 入门教程：冲破卡门线。 2019/04/25 v1.3 添加 GMAT 入门教程：Molniya 轨道预报。 2019/05/15 v1.4 添加 Orbiter 入门教程：造访国际空间站。 2019/05/25 v1.5 添加 NASA’s Eyes 入门教程：在家畅游太阳系。 2019/06/15 v1.6 添加 Orbiter 入门教程：带她一起去月球。 2019/06/25 v1.7 添加 GMAT 入门教程：霍曼转移。 2019/07/15 v1.8 添加 Orbiter 进阶教程：TransX 行星际航行指南。 2019/07/25 v1.9 添加 Orbiter 进阶教程：红色行星之旅行。 2019/08/15 v2.0 添加 Orbiter 高级教程：EVA &amp; EDL。 0.2 使用协议 本文采用 Creative Commons 使用协议，具体内容请参照 Creative Commons 协议官方网站。 第一篇 航空工具集1.0 内容概述 本篇将对开放航空工具进行分类归纳， 由于笔者已不再从事航空学方面的研究工作，所以很少再接触新的航空工具软件，文中涉及的工具皆为笔者早年间熟知的软件，具有一定的代表性。同时希望读者能够分享信息，提供更多关于开放航空仿真工具软件最新的发展状况。 本篇含有三个部分的内容，在广度和深度方面都不如航天工具集篇详实， 但其中却不乏重量级的工具。如 FlightGear 和 OpenRocket，它们在各自的领域都有着极大的影响力。特别值得一提的是它们的源代码都是开放的，使得用户可以进行深层次的探究。 笔者作为一名模拟飞行爱好者，曾经使用过 X-Plane，如今对 Orbiter 有较为系统的学习。虽然只是在虚拟的环境中体验飞行，但这也未曾不失为一种乐趣，而且模拟带着浓厚的教育意味，在此过程中可以学得一些书本之外的知识。 1.1 模拟飞行 图注：“协和”号即将降落在伦敦盖特威克机场跑道上 1.1.1 FlightGear FlightGear 是一款开源的跨平台模拟飞行器。该项目始于1997年，经过最初十年的开发，于 2007 年 12 月发布了功能较为完善的1.0.0版本。其最新版本为 2018 年 5 月 23 日发布的 v2018.2.1 版本，软件授权协议为GPL（GNU General Public License）。从FlightGear官方手册可知，FlightGear具有以下诸多特点： 民用性 该项目主要针对民航，用于通用航空和民航飞行模拟。FlightGear 的长远目标是可以作为 FAA 的飞行训练模拟器；FlightGear 不能进行空战模拟可能会让您感觉有些失望。但我们并没有完全排除 FlightGear 的这部分功能，只是因为缺少空战模拟的开发人员所以还没有实现这部分功能。 跨平台 项目所有开发人员都希望代码能不依赖平台，因此FlightGear能运行在多种电脑硬件和操作系统上。当前的代码支持 Linux（任何分支和平台）、Windows XP/Vista/7/8/10（Intel/AMD平台）、Mac OS X、BSD UNIX &amp; Sun Solaris 等等。目前为止，还没有其它任何一款模拟飞行软件（不管是商业化的还是免费的）支持如此多的平台。 开放性 FlightGear 不限定在任何固定开发人员手里，能在项目中发挥作用任何人都是受欢迎的。此项目的版权在自由软件基金会的手中，虽然 GPL 现在还不太被人们了解，但它已经得到法律的保护。在这个体系中，GPL 允许您复制和免费贡献代码，只要你喜欢这样做。然而，你必须免费提供源代码给每个需要它的人，且必须保留原始著作权。简而言之，GPL 允许你做任何除了收费之外的事情。 扩展性 从设计之初开始，FlightGear 的场景地形、飞机模型、内部参数、API 和其它任何东西都是对用户透明并有文档记录的。就算没有任何开发文档，您也能参看源代码来了解 FlightGear 是如何工作的。FlightGear 开发人员的目标是建立是一个能自由进行场景设计、飞行面板设计、ATC 设计及声音驱动的基本引擎。FlightGear 项目凝结了来自全世界开发者的智慧，我们希望此项目所有的开发人员和用户都能从中获益。 1.1.2 X-Plane/Plane-Maker Plane-Maker 是随 X-Plane 免费发布的一款内部模型插件开发工具，专门供 X-Plane 插件开发者为其开发飞机、人物、车辆及地景模型等第三方插件。用户只需安装 X-Plane Demo，而非购买完整的 X-Plane 软件包，即可获得 Plane-Maker 进行插件开发。 Plane-Maker 虽然是免费软件，但它的功能却异常强大。首先，它给开发者提供了一个十分方便的 GUI 集成环境，从而使得开发者可以很轻松地在该环境中创建各种类型的模型；其次，Plane-Maker 与 X-Plane 的交互过程既简单又高效，且在 Plane-Maker 中开发的飞机插件可以直接导入 X-Plane 这一高仿真度的模拟飞行环境中进行试飞；此外，Plane-Maker 能够读取来自外部三维软件（如 Blender、Google Sketchup、AC3D 及 3DS Max 等）所构建的各种模型。 事实上，Plane-Maker完全是 X-Plane 团队为提升自身竞争力而为第三方开发者量身打造的插件开发工具。时间证明，这种做法是成功的。因为，如今 X-Plane 的插件开发者已经为其开发了大量的优秀插件，这间接增加了 X-Plane 对用户的吸引力。你可以从 X-Plane 官方论坛下载到由众多爱好者开发的各种插件。当然，如果你想设计一架属于自己的机模，我相信 Plane-Maker 一定是不错的选择。 1.1.3 CRRCSim CRRCSim 是一款基于 GPL 发布的开源遥控模型飞机飞行模拟器，由 C 和 C++ 语言编写而成，OpenGL 作为图形驱动引擎。CRRCSim 可运行在主流的操作系统平台之上，多数 Linux 发行版本、Mac OS X 及 Microsoft Windows。使用 CRRCSim 不仅可以帮助你学习如何操控遥控模型飞机，并在模拟环境中提高遥控操纵技能，还可以帮助你测试新设计的飞机模型。 1.2 飞行动力学仿真 基于JSBSim开发的MATLAB/Simulink仿真模块 1.2.1 JSBSim JSBSim 是一套开源的飞行动力学模型软件库，目前为 FlightGear 两大常用的飞行动力学引擎之一。此外，JSBSim 还被 OpenEaagles 模拟框架所使用，并可以单独被其它程序调用，以此来创建一些模拟工具。JSBSim 于 1996 年被开发并使用至今，可运行在 Linux、Mac OS X 及 Microsoft Windows 等多种操作系统平台上，它由 C++ 编写而成，使用 XML 解析配置文件。 1.2.1 YASim YASim 是 FlightGear 两大常用的飞行动力学引擎之一，它采用飞机的几何外形来生成其飞行特性。虽然这种方法只能是近似，但在获得初始结果后可以对飞行参数作进一步调整，以此来达到逼真的仿真效果。如果你已经获得飞机可靠的飞行数据（比如风洞数据），或是想生成超级真实的仿真模型，那么 JSBSim 应该是更好的选择。但如果你手中缺乏飞行数据，只知道飞机的几何模型，那么 YASim 则能提供可以满足绝大多数仿真需求的解决方案。此外，YASim 还包含直升机飞行动力学模型。 1.3 飞行性能分析 OpenRocket Photo Studio生成的探空火箭云层穿越想象图 1.3.1 XFLR5 XFLR5 是一个在低雷诺数下翼型、机翼和飞机的分析工具，使用 Xfoil（用于分析翼型气动力的共享软件，由 MIT 航空航天系的 Prof. Mark Drela 和 H. Youngren 开发）作为求解器，QT 开发用户界面。 其主要功能包括： 基于XFoil翼型分析程序的直接和逆向分析能力； 基于升力线法、涡格法和3D面元法的机翼设计和分析。 XFLR5 v6 版本引入了模型飞机的稳定性分析。此外，中文版本的 XFLR5 可到 XFLR5中文网 下载。 1.3.2 OpenRocket OpenRocket 是一款功能强大的模型火箭仿真软件，你可以用它设计你的模型火箭，然后对其进行模拟试飞，得到其仿真性能参数，并加以改进。OpenRocket 包括以下主要功能： 六自由度飞行仿真 自动设计优化 实时高度、速度及加速度仿真显示 对火箭串并联级的支持 跨平台（基于Java） OpenRocket 以 GPL 开源协议发布，这意味着你可以自由地使用它。正如其它开源软件一样，OpenRocket 提供完整的项目源代码（由 Java 语言编写而成），这使得感兴趣的模型火箭爱好者可以理解其内部运作机理，并对其进行功能扩展。 1.3.3 Sumo Sumo 是由一位在 皇家理工学院（位于瑞典首都斯德哥尔摩）飞行动力学实验室工作的研究员基于 C++ 开发的一款飞行器建模与网格生成工具软件。 Sumo 能够快速生成飞机的几何模型，并自动对其表面进行网格划分。但它并不是一套 CAD 系统，而是一个简单易用的画板，专门用于飞机的外形结构建模。Sumo 发型版本中自带一款叫做 Scope 的气动弹性可视化工具，用于显示流体势能求解器 dwfs 生成的分析结果（如飞机表面数据、颤振振型及飞行轨迹）。另外，Scope 还能读取 NASTRAN 数据文件、模型分析结果和动画本征模态形式。 第二篇 航天工具集 2.0 内容概述 本篇将对开放航天工具进行分类归纳， 由于笔者现今从事航天学方面的研究工作，所以接触的航天工具软件比航空更加广泛，其中一些工具早在几年前已经有所了解，但出于时间和兴趣的关系没有深入研究。 本篇含有五个部分的内容，但其实每章介绍的工具软件在功能上存在着交叉。比如 Orbiter 被划分在了第四章，该章主要收集具有很强人机交互性的航天仿真软件，但Orbiter 的功能并不仅限于此，其内部包含着丰富的航天动力学理论知识。之所以进行这样的分类，是因为各款工具软件有着功能侧重点之分， 章名体现了它们的功能特色及主要用途。 2.1 航天交互式仿真 等待更新…… &copy; Copyright by Spacefan 2016-2018.","categories":[{"name":"专业技能","slug":"专业技能","permalink":"http://spacefan.github.io/categories/专业技能/"}],"tags":[{"name":"OTCAAS","slug":"OTCAAS","permalink":"http://spacefan.github.io/tags/OTCAAS/"}]},{"title":"Hexo 添加 MathJax 数学公式渲染","slug":"hexo-MathJax","date":"2018-06-27T13:30:00.000Z","updated":"2018-07-05T14:48:40.792Z","comments":true,"path":"2018/06/27/hexo-MathJax/","link":"","permalink":"http://spacefan.github.io/2018/06/27/hexo-MathJax/","excerpt":"最近想在博客上写些带有公式的文章，但却发现 Hexo 渲染公式的问题让人十分恼火。本着不怕折腾的精神，看了很多博文，也尝试可好几种解决方案，都以失败告终。今天，终于大功告成，虽然针对整个 Hexo 的完美解决方法仍需要详细探讨，但适用于 Freemind 主题的详细解决方案已然寻得。","text":"最近想在博客上写些带有公式的文章，但却发现 Hexo 渲染公式的问题让人十分恼火。本着不怕折腾的精神，看了很多博文，也尝试可好几种解决方案，都以失败告终。今天，终于大功告成，虽然针对整个 Hexo 的完美解决方法仍需要详细探讨，但适用于 Freemind 主题的详细解决方案已然寻得。 1. 添加 MathJax 支持 向 hexo_root\\themes\\freemind\\layout\\_partial 文件夹中添加 mathjax.ejs 文件： 1234567891011121314151617181920212223&lt;script type=\"text/x-mathjax-config\"&gt; MathJax.Hub.Config(&#123; menuSettings: &#123; zoom: \"None\" &#125;, showMathMenu: false, jax: [\"input/TeX\",\"output/CommonHTML\"], extensions: [\"tex2jax.js\"], TeX: &#123; extensions: [\"AMSmath.js\",\"AMSsymbols.js\"], equationNumbers: &#123; autoNumber: \"AMS\" &#125; &#125;, tex2jax: &#123; inlineMath: [[\"\\\\(\", \"\\\\)\"]], displayMath: [[\"\\\\[\", \"\\\\]\"]] &#125; &#125;);&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js\"&gt;&lt;/script&gt;&lt;/script&gt; 向 hexo_root\\themes\\freemind\\layout\\_partial\\after_footer.ejs 文件中添加如下代码：123&lt;% if (page.mathjax)&#123; %&gt;&lt;%- partial('mathjax') %&gt;&lt;% &#125; %&gt; 向站点配置文件 hexo_root\\_config.yml 中添加如下设置：12345# MathJax Supportmathjax: enable: true per_page: false cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML 2. 更改默认渲染引擎 卸载 Hexo 默认的 Markdown 渲染插件 hexo-renderer-marked：123$ npm uninstall hexo-renderer-marked --saveor$ npm un hexo-renderer-marked --save 安装新的增强型 Markdown 渲染插件 hexo-renderer-kramed：123$ npm install hexo-renderer-kramed --saveor$ npm i hexo-renderer-kramed --save 并再次向站点配置文件 hexo_root\\_config.yml 中添加如下设置：12345678kramed: gfm: true pedantic: false sanitize: false tables: true breaks: true smartLists: true smartypants: true 3. 文章启用 MathJax 前面的方法允许文章选择性加载 MathJax 渲染公式，在每篇文章头部添加 mathjax: true 即选择使用 MathJax 渲染公式。如果不添加，则本篇文章不加载 MathJax 渲染公式，如此可以节约资源，增加网页访问速度。本文头部设置如下：1234567891011---title: Hexo 添加 MathJax 数学公式渲染date: 2018-06-27 21:30:00tags: Hexo教程categories: Hexo建站description: \"Hexo Freemind 主题使用 MathJax 渲染公式入门指南\"shadow: truemathjax: truefeature: /images/hexo.jpgtoc: true--- 4. 公式显示效果测试 行内公式测试：f(x)=ax+b，\\sqrt{\\frac{a^2+b^2}{a^2-b^2}} 。注意，根据 hexo-renderer-marked 说明，行内公式格式为：12`$f(x)=ax+b$` `$\\sqrt(\\frac&#123;a^2+b^2&#125;&#123;a^2-b^2&#125;)$` 若想在行内显示$some code$符号，格式如下：1` $some code$ ` 进一步，若想在行内显示$$或者$$，格式如下：12` $$ `\\$\\$ 行间公式测试1： H=-\\sum_{i=1}^N (\\sigma_{i}^x \\sigma_{i+1}^x+g \\sigma_{i}^z)行间公式测试2（换行测试，用 \\ 可正常换行）：1234567$$f(n) = \\begin&#123;cases&#125; \\frac&#123;n&#125;&#123;2&#125;, &amp; \\text&#123;if &#125; n\\text&#123; is even&#125; \\\\ 3n+1, &amp; \\text&#123;if &#125; n\\text&#123; is odd&#125; \\end&#123;cases&#125;$$ f(n) = \\begin{cases} \\frac{n}{2}, & \\text{if } n\\text{ is even} \\\\\\ 3n+1, & \\text{if } n\\text{ is odd} \\end{cases}行间公式测试3（换行测试，用 \\\\ 代替 \\ 也可实现换行）：123456789$$f(n) = \\begin&#123;cases&#125; \\frac&#123;n&#125;&#123;2&#125;, &amp; \\text&#123;if &#125; n\\text&#123; is even&#125; \\\\\\ 3n+1, &amp; \\text&#123;if &#125; n\\text&#123; is odd&#125; \\end&#123;cases&#125;$$$$f(x): \\begin&#123;cases&#125; x, x&gt;0 \\\\\\ -x,x&lt;0 \\end&#123;cases&#125;$$ f(n) = \\begin{cases} \\frac{n}{2}, & \\text{if } n\\text{ is even} \\\\\\ 3n+1, & \\text{if } n\\text{ is odd} \\end{cases}f(x): \\begin{cases} x, x>0 \\\\\\ -x,x","categories":[{"name":"Hexo建站","slug":"Hexo建站","permalink":"http://spacefan.github.io/categories/Hexo建站/"}],"tags":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://spacefan.github.io/tags/Hexo教程/"}]},{"title":"这个星球上最强大的开源数学软件","slug":"sage-intro","date":"2017-10-27T16:30:00.000Z","updated":"2019-02-14T15:00:12.798Z","comments":true,"path":"2017/10/28/sage-intro/","link":"","permalink":"http://spacefan.github.io/2017/10/28/sage-intro/","excerpt":"1. 基本简介SageMath 是一款由 William A. Stein 主导开发的基于 GPL 协议的开源数学软件。它使用 Python 作为通用接口，并将现有的许多开源软件包整合在一起，构建一个统一的计算平台，如 NumPy, SciPy, matplotlib, Sympy, Maxima, GAP, FLINT, R 以及 更多。SageMath 的目标是创建一个有活力的自由开源软件以替代 Magma，Maple，Mathematica 和 MATLAB。","text":"1. 基本简介SageMath 是一款由 William A. Stein 主导开发的基于 GPL 协议的开源数学软件。它使用 Python 作为通用接口，并将现有的许多开源软件包整合在一起，构建一个统一的计算平台，如 NumPy, SciPy, matplotlib, Sympy, Maxima, GAP, FLINT, R 以及 更多。SageMath 的目标是创建一个有活力的自由开源软件以替代 Magma，Maple，Mathematica 和 MATLAB。 2. 功能概览SageMath 的功能异常强大，官方介绍中有这么一句：“这款开源软件的支持者称 SageMath 能够完成任何事情，从 12 维物体到计算全球变暖效应数学模型中的降雨量。” SageMath 采用浏览器作为 GUI 界面，融入了云计算的思想，可以在线使用 SageMath Cloud，你再也无需为了完成一次作业而安装十几个 Gb 大的 MATLAB 了，推荐大家去体验。 3. 快速开始软件下载访问 Download，快速开始跳转 Quickstart，详细参考文档见 Doc。此外，中文入门文档见 男单 618 - Sage Tutorial 中文版 或 Lainme - Sage Tutorial 中文版。最后附上 William A. Stein 关于其为何创建 SageMath &amp; SageMath Cloud 项目初衷的视频（若无法观看，请自行爬墙 SageMath — Open source is ready to compete with Mathematica for use in the classroom，或者访问 SageMath - 地球上最强大的开源数学软件）。","categories":[{"name":"开源世界","slug":"开源世界","permalink":"http://spacefan.github.io/categories/开源世界/"}],"tags":[{"name":"SageMath","slug":"SageMath","permalink":"http://spacefan.github.io/tags/SageMath/"}]},{"title":"GMAT R2017a 发布","slug":"GMAT2017a","date":"2017-07-29T12:00:00.000Z","updated":"2018-06-27T16:20:39.406Z","comments":true,"path":"2017/07/29/GMAT2017a/","link":"","permalink":"http://spacefan.github.io/2017/07/29/GMAT2017a/","excerpt":"R2017a 简要说明经过一年多的开发，R2017a 终于2017年7月18日在SF上发布，虽然官方网站并未未对此次发布作任何说明，但通过版本注释可以获得 R2017a 的新特性。此外，还可通过访问 开发面板 了解 R2017a 开发记录及 Bug 列表。下面对版本注释作简单翻译。 R2017a 新特性1. 定轨能力强化 定轨方面，R2017a 增加了如下新功能： 新增了对三种数据类型的处理支持：1) GPS 导航状态矢量 (GPS_PosVec)；2) 距离测量数据 (Range)；3) 距离变化率数据 (RangeRate)。注意，这三种数据类型都经过反复测试，但只有 DSN 距离变化率数据通过了应用级测试，即 DSN 距离变化率数据对于 GMAT 来说是可靠的数据。","text":"R2017a 简要说明经过一年多的开发，R2017a 终于2017年7月18日在SF上发布，虽然官方网站并未未对此次发布作任何说明，但通过版本注释可以获得 R2017a 的新特性。此外，还可通过访问 开发面板 了解 R2017a 开发记录及 Bug 列表。下面对版本注释作简单翻译。 R2017a 新特性1. 定轨能力强化 定轨方面，R2017a 增加了如下新功能： 新增了对三种数据类型的处理支持：1) GPS 导航状态矢量 (GPS_PosVec)；2) 距离测量数据 (Range)；3) 距离变化率数据 (RangeRate)。注意，这三种数据类型都经过反复测试，但只有 DSN 距离变化率数据通过了应用级测试，即 DSN 距离变化率数据对于 GMAT 来说是可靠的数据。 A minimally tested and documented alpha version of an extended Kalman filter algorithm is now available for experimental use. This plugin is available but turned off by default. To use, enable the “libEKF” plugin in the startup file. A second-level data editing capability has been added. This feature allows you to choose observations that are computed and reported but not used in the estimation state update. 2. STK .e格式星历预报器 GMAT now supports a propagator that uses AGI’s .e ephemeris file format. See the Propagator reference for more information. 3. 文件管理工具 You can now manage empirical data updates using a Python file manager. The utility allows you to easily update leap second, EOP, space weather, and other files and optionally archive old versions. See the Configuring GMAT Data Files section for more information. When you run the the utility, you will see output like that shown below (the data below is only a partial summary of the output) 4. CSALT 独立库与工具箱配置工具 GMAT now has a stand alone C++ library for solving optimal control problems via collocation (CSALT). The library is well tested and available for applications, and is currently undergoing integration into GMAT. The CSALT library is not exposed via GMAT interfaces, but users who are familiar with C++ programming can solve optimal control problems with CSALT now. The source code will be made available via SourceForge. CSALT integration into GMAT is underway and planned for completion in the next GMAT release. For more information on the CSALT Library see the paper entitled CSALT_CollocationBenchmarkingResults.pdf in the docs folder of the GMAT distribution. 5. API 接口雏形 A preliminary API is under development. The API is not available in the production release and is distributed separately on SourceForge in packages with the name “Alpha” in the title. The API employs SWIG to expose GMAT to several languages. Preliminary testing has been performed on the JAVA interface called from MATLAB. The code snippet below illustrates how to call through the JAVA interface from MATLAB to compute orbital accelerations on a spacecraft. Some testing of the Python binding as also been performed. R2017a 性能改进 You can now define the name and location of the gmat startup and logfile via the command line interface. This is useful when running multiple GMAT sessions simultaneously or when you have complex, custom file configurations. You can now write STK ephem files with units in meters (previously, only km was supported). You can now write STK ephem files without discrete event boundaries. R2017a 兼容性变化 GMAT now requires Python version 3.6.x. Schatten files no longer require the “PREDICTED SOLAR DATA” keyword at the top of the file. The names and locations of several data files used by GMAT are no longer hard coded and their names and locations are set in the file gmat_startup_file.txt located in the bin directory. If you use custom startup files, you MUST add the lines below to your startup file before GMAT will start. Note that the startup files distributed with GMAT have these lines added. This backwards compatiblity issue only affects users who customize their startup file. The syntax for navigation functionality has been significantly changed for consistency throughout the system. See the Deprecated Measurement Type Names section of the Tracking Data Types for OD Help for more details. &copy; Copyright by Spacefan 2017~2018.","categories":[{"name":"专业技能","slug":"专业技能","permalink":"http://spacefan.github.io/categories/专业技能/"}],"tags":[{"name":"GMAT","slug":"GMAT","permalink":"http://spacefan.github.io/tags/GMAT/"}]},{"title":"ORBITER 2016 发布","slug":"orbiter2016","date":"2016-08-31T15:11:09.000Z","updated":"2018-12-07T15:16:13.707Z","comments":true,"path":"2016/08/31/orbiter2016/","link":"","permalink":"http://spacefan.github.io/2016/08/31/orbiter2016/","excerpt":"ORBITER 2016 基本说明 经过长达6年之久的开发，ORBITER 2016 正式版本已于今日发布，小伙伴们又可以捣鼓捣鼓了。啥？还不知道 ORBITER 是神马东东？赶快跳转 ORBITER 模拟航天入门攻略 - Ch00。 ORBITER 2016 相对于 ORBITER 2010 有许多改进，但最为重大的改进当属高清数字高程地形（DEM）的加入，这使得行星地表看起来更加清晰，用户体验更加逼真。 此外，ORBITER 2016 重写了物理引擎，增强了碰撞检测，改进了默认机型 Delta-glider MK.4 。废话少说，上视频，直观地感受一下新版本在模拟航天方面实实在在看得见的进步。","text":"ORBITER 2016 基本说明 经过长达6年之久的开发，ORBITER 2016 正式版本已于今日发布，小伙伴们又可以捣鼓捣鼓了。啥？还不知道 ORBITER 是神马东东？赶快跳转 ORBITER 模拟航天入门攻略 - Ch00。 ORBITER 2016 相对于 ORBITER 2010 有许多改进，但最为重大的改进当属高清数字高程地形（DEM）的加入，这使得行星地表看起来更加清晰，用户体验更加逼真。 此外，ORBITER 2016 重写了物理引擎，增强了碰撞检测，改进了默认机型 Delta-glider MK.4 。废话少说，上视频，直观地感受一下新版本在模拟航天方面实实在在看得见的进步。 ORBITER 2016 高清演示 ORBITER 2016 功能简介 Martin 先生在更新 ORBITER 版本的同时，不忘更新 ORBITER 首页，Martin 先生列出了 9 个 ORBITER 的功能或特性，当然 ORBITER 的神奇并不仅仅局限于此。 &copy; Copyright by Spacefan 2016-2018.","categories":[{"name":"模拟飞行","slug":"模拟飞行","permalink":"http://spacefan.github.io/categories/模拟飞行/"}],"tags":[{"name":"ORBITER","slug":"ORBITER","permalink":"http://spacefan.github.io/tags/ORBITER/"}]},{"title":"ORBITER 模拟航天入门攻略 - Ch00","slug":"orbiter-intro","date":"2016-03-25T11:49:59.000Z","updated":"2018-06-28T16:48:29.476Z","comments":true,"path":"2016/03/25/orbiter-intro/","link":"","permalink":"http://spacefan.github.io/2016/03/25/orbiter-intro/","excerpt":"基本简介 ORBITER 是一款功能异常强大的免费太空飞行模拟器，它可以带你冲破卡门线，驶入浩瀚的星空，体味驾驶宇宙飞船的快感。 ORBITER 的核心部分由 Dr. Martin Schweiger 团队开发，第一个版本于2000年11月27日发布，最新稳定版本为 ORBITER 2016。通常，官方发布的 ORBITER 版本只是基础版（Base Edition），用户要想获得绝佳的飞行体验还需要下载第三方扩展插件，如 DanSteph 开发的 OrbiterSound，及社区开发用于支持 DirectX9 图形渲染的 D3D9Client 客户端。 ORBITER 能够十分真实地模拟航天器在轨运行的轨迹，这源于隐藏在视觉背后的航天动力学理论知识。当用户驾驶飞船翱翔在太阳系时，实际上是沉侵于太阳强大的引力场中。下面让我们用三个视频来更为直观地认识 ORBITER。","text":"基本简介 ORBITER 是一款功能异常强大的免费太空飞行模拟器，它可以带你冲破卡门线，驶入浩瀚的星空，体味驾驶宇宙飞船的快感。 ORBITER 的核心部分由 Dr. Martin Schweiger 团队开发，第一个版本于2000年11月27日发布，最新稳定版本为 ORBITER 2016。通常，官方发布的 ORBITER 版本只是基础版（Base Edition），用户要想获得绝佳的飞行体验还需要下载第三方扩展插件，如 DanSteph 开发的 OrbiterSound，及社区开发用于支持 DirectX9 图形渲染的 D3D9Client 客户端。 ORBITER 能够十分真实地模拟航天器在轨运行的轨迹，这源于隐藏在视觉背后的航天动力学理论知识。当用户驾驶飞船翱翔在太阳系时，实际上是沉侵于太阳强大的引力场中。下面让我们用三个视频来更为直观地认识 ORBITER。 A FILM BY TEX - ORBITER 2006-P1 EDITION ALR-4 - MISSION TO VENUS A FILM BY TEX - Jupiter Odyssey (: 肿么样! 有没有感觉到：高、大、上 :) 影响力 经过十多年的开发，ORBITER 日益成熟，在国内外得到了广大模拟飞行爱好者的青睐。在国外，ORBITER 已经广泛用于教学辅助，产生了巨大的反响。在 Yutube 上，众多ORBITER 爱好者发布有相关的教学视频，帮助初学者快速进入角色。 ORBITER 的发展离不开强大的社区，其中最值得一提的是由 Tex 组建的官方论坛 ORBITER Forum。在这里中，众多 ORBITER 爱好者齐聚一堂，相互学习、相互帮助、协同开发，共同推动着 ORBITER 向前发展。 开放度 ORBITER 虽然可以免费获取，但它并不是一款开源软件，它的开放性体现在 SDK (Software Development Kits，软件开发套件)。通过 SDK 预设的 API，开发者可以进行二次开发，创建出各种各样属于自己的箭船、地景、星球、MFD 以及其它各种各样的插件。 任务类型 ORBITER 之所以受到广大模拟飞行爱好者的青睐，是因为其具有丰富的任务类型。你无需担心来自外星人的攻击，也无需为提高等级而“过关斩将”。你唯一需要做的就是自己设定好飞行任务，然后飞到太阳系中任何你想去的地方。通常情况下，用户可以在 ORBITER 中执行以下几类基本任务： 驾驶各色各样的飞行器奔向太空； 在太空中进行各种形式的轨道机动； 执行各种航天任务，如交会对接、太空行走（EVA）、载荷部署、空间目标捕获及空间站组建等，当然还有欣赏太空那迷人的美景； 进行星际航行，访问太阳系内的行星或卫星； 从太空返回并降落，当然最好是能安全降落。 内建航天器 ORBITER 基础版本含有丰富的内建航天器，包含真实世界中存在的航天器和概念航天器。 真实世界存在的航天器 1. “阿特兰蒂斯号” 航天飞机 (Space Shuttle Atlantis) 阿特兰蒂斯号 是美国航天飞机梯队中的一员，由 NASA 运行维护。由于航天飞机维修花费巨大，且安全系数较低，已于2011年退出历史舞台。在 ORBITER 中，阿特兰蒂斯号 航天飞机是唯一一架玩家可操作的、基于真实设计参数构建的飞行器模型。 2. “和平号” 空间站 (Space Station Mir) 和平号 空间站是前苏联发展的第三代空间站，象征着空间站走向实用阶段。前苏联解体后，和平号 空间站由俄罗斯接管，并超期服役至2001年，最终坠入太平洋。在 ORBITER 中，和平号 空间站并未坠毁，而是被放置在了一个近椭圆轨道。这样做的初衷是为了让 和平号 间站成为早期 ORBITER 版本中进行星际航行较好的出发点，当玩家驾驶着飞船与 和平号 空间站对接后，可以自动加注燃料，向更远的星际空间飞去。另外，玩家也可以从 和平号 空间站转移到最终的目标轨道。 3. 国际空间站 (International Space Station，ISS) 运行在与真实世界相同轨道上并组装完成的 国际空间站，包括当前已经取消安装计划的模块。 4. 哈勃太空望远镜 (Hubble Space Telescope，HST) 真实比列的 哈勃太空望远镜模型，在 ORBITER 中通常作为航天飞机的载荷。 5. 长期暴露装置 (Long Duration Exposure Facility，LDEF) LDEF 是 NASA 为研究空间环境对航天器性能影响作用机理而发射的实验卫星，在将近 6 年的暴露时间里，LDEF 经历了各种空间环境的作用，为 NASA 研究人员提供了宝贵的实验数据。和 哈勃太空望远镜 一样，LDEF 是 ORBITER 中航天飞机极佳的有效载荷之一。 概念航天器 1. Delta-glider MK.4 德尔塔 三角翼空天飞机是 ORBITER 经典的入门级飞行器，它十分容易操作，所以被 ORBITER 用作默认飞行器。有两种型号的 德尔塔，一种是 Delta-glider Mk.4 (DG)，另一种是 Delta-glider-S MK.4 (DG-S)。DG-S 在 DG 的基础上加装了超燃发动机，使得其可以在高层大气进行超音速飞行。由于德尔塔的设计过程中采用了超高比冲的推进剂和超低燃料消耗率的发动机，所以它可以很轻松地实现单级入轨，并具备星际航行的能力。 2. Shuttle-A Shuttle-A 是 ORBITER 中的小型概念太空货运飞船，可以运输六个总重高达120吨的大型货箱。它没有气动操纵面，主要用于月球和火星测探。空载时，Shuttle-A 可以从地球起飞，并降落在地面上。但由于其缺乏气动升力，加上地球的引力和大气阻力，使得 Shuttle-A 从地面起飞、降落变得困难，且十分消耗燃料。 Shuttle-A 的货箱带有自动降落伞，因而可以在高层大气释放货物。Shuttle-A 的惯性大，空气动力学性能极差，致使其比 德尔塔更难在大气层内飞行。 3. Shuttle-PB Shuttle-PB 是 ORBITER 中的小型个人航天器，其敏捷性高，外形设计具有前瞻性。由于主要作为 SDK 样例供插件开发者参考，所以相对于 ORBITER 中的其它内建飞船，Shuttle-PB 缺乏具体的细节，如 2D/3D 座舱和动画显示功能。 4. Dragonfly Dragonfly 是 ORBITER 中为空间站组件而设计的一种构造复杂的载人航天运载器，它对多个子系统进行了仿真设计，其复杂度胜过 ORBITER 其它所有内建航天器。Dragonfly 作为 SDK 技术实现层面的绝佳示例，其源代码包含在 ORBITER/SDK 安装包内。Dragonfly 的飞行模型设计参数可以用当前的航天技术实现，所以称 Dragonfly 是一种接近现实的航天器。 5. Luna-OB1 Luna-OB1 是 ORBITER 中的一座科幻轮状月球轨道空间站，其设计灵感来自《2001: A Space Odyssey》片头中的 Space Station V。由于 Luna-OB1 以固定的旋转角速度运动，所以与其对接是一件极具挑战性的任务。 6. Carina Carina 是一种小型的概念卫星，在 ORBITER 中作为航天飞机的有效载荷，但目前还属于毫无用途的载荷类型。 操作复杂度 ORBITER 并不像多数商业化太空游戏，只具备十分粗糙的物理模型，其内部采用的是精确的航天动力学模型，包括 Kepler 二体轨道、非球形摄动（只考虑带谐项）、大气阻力摄动（高达 2000km）及太阳光压摄动。如果你想真正理解 ORBITER 的运行方式，需要有一定的轨道力学基础。 此外，虽然 ORBITER 可以连接飞行摇杆，但绝大多数操作需要使用快捷键，这在某种程度上也增加了 ORBITER 的入门难度。 总而言之，ORBITER 是一款十分严谨的太空飞行模拟器，掌握 ORBITER 需要大量的实践操作，以及对轨道力学的深刻理解。 文档完善度 ORBITER 经过十多年的发展，拥有数量相当可观的用户群，相关的教程也较为完善。除了官方发布的文档外（位于 ORBITER 安装根目录下的 \\Doc 子文件夹内），互联网上可以找到很多关于 ORBITER 的学习资料。但由于绝大多数教程由英文写成，且专业性较强，所以 ORBITER 的学习曲线仍然相当陡峭。 最后需要说明的是，要想成为一名顶级的 ORBITER 玩家，需要大量的时间和持久的耐心进行实践操作，在此过程中一定要坚持，不气馁、不放弃。永远记住，这是真正的太空模拟飞行，而不只是游戏。毕竟，我们选择在 ORBITER 中模拟飞行，不是因为它简单，而是因为它难。 &copy; Copyright by Spacefan 2016-2018.","categories":[{"name":"模拟飞行","slug":"模拟飞行","permalink":"http://spacefan.github.io/categories/模拟飞行/"}],"tags":[{"name":"ORBITER","slug":"ORBITER","permalink":"http://spacefan.github.io/tags/ORBITER/"}]},{"title":"GMAT 入门攻略 - Ch01","slug":"GMAT-intro-ch01","date":"2016-03-17T12:57:53.000Z","updated":"2018-06-19T14:50:48.875Z","comments":true,"path":"2016/03/17/GMAT-intro-ch01/","link":"","permalink":"http://spacefan.github.io/2016/03/17/GMAT-intro-ch01/","excerpt":"","text":"内容概要 GMAT 入门攻略 - Ch00 对 GMAT 作了简单的介绍，相信读者已经对其有了初步的认识。本章将进入实战阶段，用 GMAT 进行 Molniya 类型卫星的轨道预报。通过本章，你将学到： 如何安装 GMAT； GMAT 人机界面要素； 如何用 GMAT 进行轨道预报。 你需要具备： 航天器轨道力学基本知识； 计算机基本使用技巧； Waiting to be update…… &copy; Copyright by Spacefan 2016-2018.","categories":[{"name":"专业技能","slug":"专业技能","permalink":"http://spacefan.github.io/categories/专业技能/"}],"tags":[{"name":"GMAT","slug":"GMAT","permalink":"http://spacefan.github.io/tags/GMAT/"}]},{"title":"GMAT 入门攻略 - Ch00","slug":"GMAT-intro","date":"2016-03-14T16:25:41.000Z","updated":"2018-06-19T14:50:26.226Z","comments":true,"path":"2016/03/15/GMAT-intro/","link":"","permalink":"http://spacefan.github.io/2016/03/15/GMAT-intro/","excerpt":"基本情况 GMAT 是一套由 NASA 戈达德太空飞行中心(Goddard Space Flight Center, GSFC) 主导开发的通用航天任务仿真工具，作为一款开源的通用航天任务分析仿真软件， 其功能涵盖了基本的航天任务分析需求，如轨道设计、轨道优化、飞行任务分析、星座设计及行星际飞行仿真等。GMAT 的仿真精度可以与 AGI/STK 相媲美，足以将其直接应用于通用航天任务的分析与仿真工作之中。 项目起源 GMAT 为 G eneral M ission A nalysis T ool 的首字母缩写，由 GSFC 从 2002 年开始开发。 随后在 NASA 的号召下，Thinking System. Inc、Computer Sciences Corporation 以及 Honeywell Technology Solutions. Inc 等公司参与了该软件的开发，目前 NASA 仍在继续寻找开源伙伴合作参与该项目的进一步研发。","text":"基本情况 GMAT 是一套由 NASA 戈达德太空飞行中心(Goddard Space Flight Center, GSFC) 主导开发的通用航天任务仿真工具，作为一款开源的通用航天任务分析仿真软件， 其功能涵盖了基本的航天任务分析需求，如轨道设计、轨道优化、飞行任务分析、星座设计及行星际飞行仿真等。GMAT 的仿真精度可以与 AGI/STK 相媲美，足以将其直接应用于通用航天任务的分析与仿真工作之中。 项目起源 GMAT 为 G eneral M ission A nalysis T ool 的首字母缩写，由 GSFC 从 2002 年开始开发。 随后在 NASA 的号召下，Thinking System. Inc、Computer Sciences Corporation 以及 Honeywell Technology Solutions. Inc 等公司参与了该软件的开发，目前 NASA 仍在继续寻找开源伙伴合作参与该项目的进一步研发。 主要特性 GMAT 的主要特性包括： 高仿真度航天动力学模型； 图形和报表生成； 任务优化及目标定位； MATLAB &amp; Python 编程接口； Apache License Version 2.0 开源许可协议； 跨平台：支持Windows/MacOS X/Linux； 内建脚本编程； 用户自定义函数； 以及二次开发等。 当前最新版本为2017年7月18日发布的 GMAT R2017a。经过十多年的持续开发，GMAT 的 用户手册 已经相当完善，但由于文档皆用英文撰写，所以学习起来存在一定的语言障碍。 GMAT R2017a 启动窗口 &copy; Copyright by Spacefan 2016-2018.","categories":[{"name":"专业技能","slug":"专业技能","permalink":"http://spacefan.github.io/categories/专业技能/"}],"tags":[{"name":"GMAT","slug":"GMAT","permalink":"http://spacefan.github.io/tags/GMAT/"}]},{"title":"世界你好！","slug":"hexo-hello-world","date":"2016-03-14T16:25:00.000Z","updated":"2018-06-30T15:45:43.327Z","comments":true,"path":"2016/03/15/hexo-hello-world/","link":"","permalink":"http://spacefan.github.io/2016/03/15/hexo-hello-world/","excerpt":"很高兴使用 Hexo! 这是我的第一篇博文。查看 documentation 可以获取更多关于 Hexo 的信息。如果你在使用 Hexo 的过程中遇到问题，可以访问 troubleshooting 或者在 GitHub 上询问 Hexo 的作者。 快速开始创建新博文1$ hexo new \"My New Post\" 更多信息: Writing 运行服务1$ hexo server 更多信息: Server 生成静态文件1$ hexo generate","text":"很高兴使用 Hexo! 这是我的第一篇博文。查看 documentation 可以获取更多关于 Hexo 的信息。如果你在使用 Hexo 的过程中遇到问题，可以访问 troubleshooting 或者在 GitHub 上询问 Hexo 的作者。 快速开始创建新博文1$ hexo new \"My New Post\" 更多信息: Writing 运行服务1$ hexo server 更多信息: Server 生成静态文件1$ hexo generate 更多信息: Generating 部署至远程站点1$ hexo deploy 更多信息: Deployment","categories":[{"name":"Hexo建站","slug":"Hexo建站","permalink":"http://spacefan.github.io/categories/Hexo建站/"}],"tags":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://spacefan.github.io/tags/Hexo教程/"}]}]}